// Mocks generated by Mockito 5.4.5 from annotations
// in english_reading_app/test/word_detail/domain/usecase/is_word_saved_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:english_reading_app/core/error/failure.dart' as _i5;
import 'package:english_reading_app/feature/word_detail/domain/repository/word_detail_repository.dart'
    as _i3;
import 'package:english_reading_app/product/model/dictionary_entry.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WordDetailRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWordDetailRepository extends _i1.Mock
    implements _i3.WordDetailRepository {
  MockWordDetailRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.DictionaryEntry?>>
      getWordDetailFromApi(String? word) => (super.noSuchMethod(
            Invocation.method(
              #getWordDetailFromApi,
              [word],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.DictionaryEntry?>>.value(
                    _FakeEither_0<_i5.Failure, _i6.DictionaryEntry?>(
              this,
              Invocation.method(
                #getWordDetailFromApi,
                [word],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, _i6.DictionaryEntry?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.DictionaryEntry?>>
      getWordDetailFromFirestore(String? word) => (super.noSuchMethod(
            Invocation.method(
              #getWordDetailFromLocal,
              [word],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.DictionaryEntry?>>.value(
                    _FakeEither_0<_i5.Failure, _i6.DictionaryEntry?>(
              this,
              Invocation.method(
                #getWordDetailFromLocal,
                [word],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, _i6.DictionaryEntry?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> saveWordToLocal(
          _i6.DictionaryEntry? entry) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveWordToLocal,
          [entry],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #saveWordToLocal,
            [entry],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> isWordSaved(
    String? word,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isWordSaved,
          [
            word,
            userId,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #isWordSaved,
            [
              word,
              userId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
