// Mocks generated by Mockito 5.4.5 from annotations
// in english_reading_app/test/word_detail/data/repository/word_detail_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:english_reading_app/core/connection/network_info.dart' as _i7;
import 'package:english_reading_app/feature/word_detail/data/datasource/word_detail_remote_data_source.dart'
    as _i3;
import 'package:english_reading_app/product/model/dictionary_entry.dart' as _i5;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeInternetConnectionChecker_0 extends _i1.SmartFake
    implements _i2.InternetConnectionChecker {
  _FakeInternetConnectionChecker_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WordDetailRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWordDetailRemoteDataSource extends _i1.Mock
    implements _i3.WordDetailRemoteDataSource {
  MockWordDetailRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.DictionaryEntry>> getWordDetail(String? word) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWordDetail,
          [word],
        ),
        returnValue: _i4.Future<List<_i5.DictionaryEntry>>.value(
            <_i5.DictionaryEntry>[]),
      ) as _i4.Future<List<_i5.DictionaryEntry>>);

  @override
  _i4.Future<_i5.DictionaryEntry?> getWordDetailFromFirestore(String? word) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWordDetailFromFirestore,
          [word],
        ),
        returnValue: _i4.Future<_i5.DictionaryEntry?>.value(),
      ) as _i4.Future<_i5.DictionaryEntry?>);

  @override
  _i4.Future<String> saveWordToFirestore(_i5.DictionaryEntry? entry) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveWordToFirestore,
          [entry],
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #saveWordToFirestore,
            [entry],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<bool> isWordSavedInFirestore(
    String? word,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isWordSavedInFirestore,
          [
            word,
            userId,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.InternetConnectionChecker get connectivity => (super.noSuchMethod(
        Invocation.getter(#connectivity),
        returnValue: _FakeInternetConnectionChecker_0(
          this,
          Invocation.getter(#connectivity),
        ),
      ) as _i2.InternetConnectionChecker);

  @override
  _i4.Future<bool> get currentConnectivityResult => (super.noSuchMethod(
        Invocation.getter(#currentConnectivityResult),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
