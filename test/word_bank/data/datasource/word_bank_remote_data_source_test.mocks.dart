// Mocks generated by Mockito 5.4.5 from annotations
// in english_reading_app/test/word_bank/data/datasource/word_bank_remote_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:cloud_firestore/cloud_firestore.dart' as _i6;
import 'package:english_reading_app/product/firebase/model/base_firebase_model.dart'
    as _i3;
import 'package:english_reading_app/product/firebase/service/base_firebase_service.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BaseFirebaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseFirebaseService<T extends _i3.BaseFirebaseModel<T>>
    extends _i1.Mock implements _i4.BaseFirebaseService<T> {
  MockBaseFirebaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<void> setItem(
    String? collectionPath,
    T? item,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setItem,
          [
            collectionPath,
            item,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<String> addItem(
    String? collectionPath,
    T? item,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addItem,
          [
            collectionPath,
            item,
          ],
        ),
        returnValue: _i2.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #addItem,
            [
              collectionPath,
              item,
            ],
          ),
        )),
      ) as _i2.Future<String>);

  @override
  _i2.Future<void> updateItem(
    String? collectionPath,
    String? docId,
    T? item,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateItem,
          [
            collectionPath,
            docId,
            item,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> deleteItem(
    String? collectionPath,
    String? docId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [
            collectionPath,
            docId,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> deleteSubCollections(List<String>? subCollections) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteSubCollections,
          [subCollections],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<T> getItem({
    required String? collectionPath,
    required String? docId,
    required T? model,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getItem,
          [],
          {
            #collectionPath: collectionPath,
            #docId: docId,
            #model: model,
          },
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #getItem,
                  [],
                  {
                    #collectionPath: collectionPath,
                    #docId: docId,
                    #model: model,
                  },
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #getItem,
                [],
                {
                  #collectionPath: collectionPath,
                  #docId: docId,
                  #model: model,
                },
              ),
            ),
      ) as _i2.Future<T>);

  @override
  _i2.Future<List<T>> queryItems({
    required String? collectionPath,
    required Map<String, dynamic>? conditions,
    required T? model,
    String? orderBy,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queryItems,
          [],
          {
            #collectionPath: collectionPath,
            #conditions: conditions,
            #model: model,
            #orderBy: orderBy,
          },
        ),
        returnValue: _i2.Future<List<T>>.value(<T>[]),
      ) as _i2.Future<List<T>>);

  @override
  _i2.Future<List<T>> getAllItems({
    required String? collectionPath,
    required T? model,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllItems,
          [],
          {
            #collectionPath: collectionPath,
            #model: model,
          },
        ),
        returnValue: _i2.Future<List<T>>.value(<T>[]),
      ) as _i2.Future<List<T>>);

  @override
  _i2.Stream<T> listenAndGetItem({
    required String? collectionPath,
    required String? docId,
    required T? model,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenAndGetItem,
          [],
          {
            #collectionPath: collectionPath,
            #docId: docId,
            #model: model,
          },
        ),
        returnValue: _i2.Stream<T>.empty(),
      ) as _i2.Stream<T>);

  @override
  _i2.Future<List<T>> getPaginatedItems({
    required String? collectionPath,
    required T? model,
    required int? limit,
    _i6.DocumentSnapshot<Object?>? lastDocument,
    DateTime? startDate,
    DateTime? endDate,
    String? dateFieldName = 'createdAt',
    bool? descending = true,
    Map<String, dynamic>? additionalConditions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPaginatedItems,
          [],
          {
            #collectionPath: collectionPath,
            #model: model,
            #limit: limit,
            #lastDocument: lastDocument,
            #startDate: startDate,
            #endDate: endDate,
            #dateFieldName: dateFieldName,
            #descending: descending,
            #additionalConditions: additionalConditions,
          },
        ),
        returnValue: _i2.Future<List<T>>.value(<T>[]),
      ) as _i2.Future<List<T>>);

  @override
  _i2.Future<_i6.DocumentSnapshot<Object?>?> getLastDocument({
    required String? collectionPath,
    required String? docId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastDocument,
          [],
          {
            #collectionPath: collectionPath,
            #docId: docId,
          },
        ),
        returnValue: _i2.Future<_i6.DocumentSnapshot<Object?>?>.value(),
      ) as _i2.Future<_i6.DocumentSnapshot<Object?>?>);
}
